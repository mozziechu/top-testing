python 学习
优点：
    1、代码少、优雅、明确、简单（Python的哲学就是简单优雅，尽量写容易看明白的代码，尽量写少的代码）。
缺点：
    1、运行速度慢、python是解释型语言，代码在执行时会一行一行的翻译成CPU能理解的机器码，耗时
而比如C语言，他是在运行前直接编译成了CPU能执行的机器码，所以非常快。
    2、代码不能加密
python应用：
    1、网络应用（网站、后台服务）
    2、小工具（系统管理员需要的任务脚本）
python学习
 *安装python环境
    1、安装python环境（廖雪峰的博客有下载地址）
    2、特别要注意勾上Add Python 3.6 to PATH，然后点“Install Now”即可完成安装。（不勾选需要手动配置环境变量path）
 *python解释器
    1、当我们从Python官方网站下载并安装好Python 3.x后，我们就直接获得了一个官方版本的解释器：CPython。
    这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。
 *第一个python程序
    命令行模式 （命令窗口）
    进入python交互模式 （命令窗口下输入命令python） >>>为交互模式提示符
    退出python交互模式 （命令窗口下输入命令exit()）
    案例：
    用nodepad++ 新建一个sharly-python.py的python文件，内容如下：
    print(100+200+300)
    在sharly-python.py的目录下用命令行模式输入：python sharly-python.py
    输出600
    交互模式下直接输入100+200+300
    输出600
    input()可以获取用户的输入
 *数据类型与常量
 转义字符
    \n 表示换行
    \t 表示制表符 tab
    \\ 表示\
    案例：
    >>>print('I/'m ok.')
    I'm ok.
    >>>print('\\\n\\')
    \
    \

    r''表示内部字符串默认不转义
    案例：
    >>>print('\\\t\\')
    \   \
    >>>print(r'\\\t\\')
    \\\t\\

    \n在一行里不好阅读，用'''...'''格式表示多行内容  ...不是手动输入的代码 是按回车后的提示符
    >>>print('''line1
    ... line2
    ... line3''')
    line1
    line2
    line3

    布尔值:and or not
    and  与运算，所有都为true 才是true
    or   或运算，有一个为true 就是true
    not  非运算

    常量
    PI = 3.14159265359
    除法：
    / 计算结果无论是否整除都是浮点数
    // 地板除 结果取整
    % 取余

 *字符串和编码
    字符
    >>>ord('A')
    65
    >>>ord'中'
    20013
    >>>chr(66)
    'B'
    >>>chr(25991)
    '文'

    十六进制
    >>> '\u4e2d\u6587'
    '中文'

    bytes类型 python对bytes类型的数据用带b前缀的单引号或双引号表示,后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节
    'ABC'
    b'ABC'

    纯英文的字符串可以用ascii编码为bytes
    含有中文的字符串可以用UTF-8编码为bytes
    含有中文的字符串无法用ascii编码，因为中文的编码范围超出了ascii的编码范围
    >>> 'ABC'.encode('ascii')
    b'ABC'
    >>> '中文'.encode('utf-8')
    b'\xe4\xb8\xad\xe6\x96\x87'
    >>> '中文'.encode('ascii')
    报错

    bytes转为str
    >>> b'ABC'.decode('ascii')
    'ABC'
    >>> b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
    '中文'

    计算str包含多少个字符，可以用len()函数
    len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数：
    1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。
    len('ABC') 3
    len('中文') 2
    len(b'ABC') 3
    len('中文'.encode('utf-8')) 6

    python为文本文件，包含中文是，在保存源代码时，需要指定保存为UTF-8
    当python解释器读取源代码时为了让它按照UTF-8编码读取，通常在文件开头加上这两行
    # 代表注释：
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-
    第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；
    第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。

    格式化
    %d 整数
    %f 浮点数
    %s 字符串
    %x 十六进制整数
    格式化整数和浮点数还可以指定是否补0和整数与小数的位数：

    >>>print('%2d-%02d' % (3, 1))
    3-01
    >>>print('%.2f' % 3.1415926)
    3.14
    >>>'Hi, %s, you have $%d.' % ('Michael', 1000000)
    'Hi, Michael, you have $1000000'

    %作为普通字符 用%%表示

     'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
     'Hello, 小明, 成绩提升了 17.1%'

 *List和tuple
  List   []
    **list是一种有序的集合，可以随时添加和删除其中的元素
    classmates = ['Michael', 'Bob', 'Tracy']
    len(classmates) 3
    classmates[0] 'Michael'
    classmates[-1] 'Tracy' 获取最后一个元素
    classmates.append('Adam') 末尾追加
    classmates.insert(1,'Jack') 指定索引位置插入
    classmates.pop() 删除末尾元素
    classmates.pop(1) 删除指定索引位置元素
    classmates[1] = 'Sarah' 某个元素替换
    **list里面的元素的数据类型也可以不同
     L = ['Apple', 123, True]
    **多维数组
     s = ['python', 'java', ['asp', 'php'], 'scheme']
   Tuple   ()
    **tuple一旦初始化就不能修改，无法insert、append等操作
    **定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来
    tuple只有一个元素时不能定义为(1)，只能定义为(1,)

 * 条件判断
    if XXX :
     do something
     elif XXX :
     do something
    else:
     do something

 *循环
    **for……in……循环
    range()函数，可以生成一个整数序列，再通过list()函数可以转换为list
    list(range(5))
    [0,1,2,3,4]
    sum = 0
    for x in range(101):
        sum = sum + x
        print(sum)
    可以计算出0-100的整数和
    
    **while循环
    sum = 0
    n = 99
    while n > 0:
        sum = sum + n
        n = n - 2
    print(sum)

*dict和set
    dict相当于map  根据key查找value
    >>>d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
    >>>d['Michael']
    95

    >>>'Thomas' in d
    false

    >>>d.get('Thomas') 不存在 返回None，也可以指定value
    >>>d.get('Thomas', -1)
    >>>'Thomas' in d false 判断key是否存在
    >>>d.pop('Bob') 75 从d中删除了key为'Bob' value为75的数据

*函数
    了解函数定义 用help(abs)
    abs() 取绝对值
    max(2,3,1,-5)
    int() 把其他类型转换为整数
    float()
    str() 转字符串
    bool()
    hex()

*自定义函数
    **自定义函数+如何使用
    def my_abs(x):
    if x >= 0:
     return x
    else:
     return -x

     my_abs(-100) 100

    **定义一个什么都不做的空函数
     def nop():
        pass

    **数据类型检查isinstance()
    my_abs如果不是整数或者浮点数参数 会报错
    def my_abs(x):
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x

    import math
    def move(x, y, step, angle=0):
        nx = x + step * math.cos(angle)
        ny = y - step * math.sin(angle)
        return nx, ny
    >>> x, y = move(100, 100, 60, math.pi / 6)
    >>> print(x, y)
    151.96152422706632 70.0

    >>> r = move(100, 100, 60, math.pi / 6)
    >>> print(r)
    (151.96152422706632, 70.0)

    **函数的参数
    默认参数必须指向不变对象
    默认参数降低了函数调用的难度，而一旦需要更复杂的调用时，又可以传递更多的参数来实现。无论是简单调用还是复杂调用，函数只需要定义一个。
    def enroll(name, gender, age=6, city='Beijing'):
    print('name:', name)
    print('gender:', gender)
    print('age:', age)
    print('city:', city)

    >>> enroll('Sarah', 'F')
    name: Sarah
    gender: F
    age: 6
    city: Beijing

    **递归函数
    如果一个函数在内部调用自身本身，这个函数就是递归函数

    **切片
    L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
    对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了切片（Slice）操作符，能大大简化这种操作。
    >>> L[0:3]
    ['Michael', 'Sarah', 'Tracy']
    L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3 0可以省略L[:3]
    倒数切片
    >>>L[-2:-1]
    ['Bob', 'Jack']
    倒数第一个元素的索引是-1。同样，-1也可以省略

    创建一个0-99的数列
    L=list(range(100))
    取前10个数
    L[0:10] or L[:10]
    取后10个数
    L[-10:-1] or L[-10:]
    前11-20个数
    L[10:20]
    前10个数，每两个取1个
    L[:20:2]
    所有数，每5个取1个
    L[::5]
    取所有，复制一个list
    L[:]
    切片操作还能针对字符串

    **迭代
    for……in……遍历
    Python的for循环不仅可以用在list或tuple上，还可以作用在其他可迭代对象上
    比如dict（map）可以迭代
    >>> d = {'a': 1, 'b': 2, 'c': 3}
    >>> for key in d:
     print(key) 

    ！！！注意：回车后要加一个空格再输入print(),否则报错

    a
    b
    c

    默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.values()
    如果要同时迭代key和value，可以用for k, v in d.items()

    判断对象是否可以迭代
    数据类型检查isinstance()
    from collections import Iterable
    isinstance('abc',Iterable)

    对list实现类似Java那样的下标循环怎么办？
    Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身
    for i,value in enumerate(['A','B','C']):
     print(i, value)

    ** 列表生成式
    [x * x for x in list[range(1,11)]]
    [x * x for x in list[range(1,11)] if x % 2 == 0]
    [m + n for m in 'ABC' for n in 'XYZ']

    运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，可以通过一行代码实现：
    import OS
    [d for d in os.listdir('.')]

    列表生成式可以同时使用两个甚至多个变量
    d = {'a':'aaa','b':'bbb','c':'ccc'}
    [k + '=' + v for k,v in d.items()]

    把字符串变成小写
    L = ['Hello', 'World', 'IBM', 'Apple']
    [s.lower() for s in L]
    ['hello', 'world', 'ibm', 'apple']

    **生成器
    如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。
    在Python中，这种一边循环一边计算的机制，称为生成器：generator
    创建一个generator，只需要把list的[] 改为()
    用next() 可以获取到generator的下一个返回值，这样太麻烦了，可以这样写：
    g = (x * x for x in range(10))
    for n in g:
        print(n)

    斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易
    def fib(max):
    n, a, b = 0, 0, 1
    while n < max:
        print(b)
        a, b = b, a + b
        n = n + 1
    return 'done'

    fib函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。
    也就是说，上面的函数和generator仅一步之遥。要把fib函数变成generator，只需要把print(b)改为yield b就可以了
    def fib(max):
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        a, b = b, a + b
        n = n + 1
    return 'done'

    返回值是一个generator对象：<generator object fib at 0x1022ef948>
    list()函数解析


    可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator
    list、dict、str虽然是Iterable，却不是Iterator 把他们变成Iterator可以用iter()函数
    isinstance(iter('abc'),Iterator)

    **map和reduce
    map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回
    def f(x):
        return x * x

    r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
    list(r)
    [1, 4, 9, 16, 25, 36, 49, 64, 81]

    reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算
    from functools import reduce
    def fn(x, y):
         return x * 10 + y
    reduce(fn, [1, 3, 5, 7, 9])

    **filter

